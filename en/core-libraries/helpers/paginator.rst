PaginatorHelper
###############

.. php:namespace:: Cake\View\Helper

.. php:class:: PaginatorHelper(View $view, array $settings = [])

The Pagination helper is used to output pagination controls such as
page numbers and next/previous links. It works in tandem with
:php:class:`PaginatorComponent`.

See also :doc:`/core-libraries/components/pagination` for information on how to
create paginated datasets and do paginated queries.

.. _paginator-templates:

PaginatorHelper Templates
=========================

Internally PaginatorHelper uses a series of simple HTML templates to generate
markup. You can modify these templates to customize the HTML generated by the
PaginatorHelper.

Templates use ``{{var}}`` style placeholders. It is important to not add any
spaces around the `{{}}` or the replacements will not work.

Loading Templates from a File
-----------------------------

When adding the PaginatorHelper in your controller, you can define the
'templates' setting to define a template file to load. This allows you easily
customize multiple templates and keep your code DRY::

    // In a controller.
    public $helpers = [
        'Paginator' => ['templates' => 'paginator-templates.php']
    ];

This will load the file located at ``App/Config/paginator-templates.php`` and
read templates from the ``$config`` variable within that file. You can also load
templates from a plugin using :term:`plugin syntax`::

    // In a controller.
    public $helpers = [
        'Paginator' => ['templates' => 'MyPlugin.paginator-templates.php']
    ];

Whether your templates are in the primary application or a plugin, your
templates file should look something like::

    $config = [
        'number' => '<a href="{{url}}">{{text}}</a>',
    ];

Changing Templates at Run-time
------------------------------

.. php:method:: templates($templates = null)

This method allows you to change the templates used by PaginatorHelper at
runtime. This can be useful when you want to customize templates for
a particular method call::

    // Read the current template value.
    $result = $this->Paginator->templates('number');

    // Change a template
    $this->Paginator->templates([
        'number' => '<em><a href="{{url}}">{{text}}</a></em>'
    ]);

Template Names
--------------

PaginatorHelper uses the following templates:

- ``nextActive`` The active state for a link generated by next().
- ``nextDisabled`` The disabled state for next().
- ``prevActive`` The active state for a link generated by prev().
- ``prevDisabled`` The disabled state for prev()
- ``counterRange`` The template counter() uses when format == range.
- ``counterPages`` The template counter() uses when format == pages.
- ``first`` The template used for a link generated by first().
- ``last`` The template used for a link generated by last()
- ``number`` The template used for a link generated by numbers().
- ``current`` The template used for the current page.
- ``ellipsis`` The template used for ellipses generated by numbers().
- ``sort`` The template for a sort link with no direction.
- ``sortAsc`` The template for a sort link with an ascending direction.
- ``sortDesc`` The template for a sort link with a descending direction.


Creating Sort Links
===================

.. php:method:: sort($key, $title = null, $options = [])

    :param string $key: The name of the column that the recordset should be sorted.
    :param string $title: Title for the link. If $title is null $key will be
        used for the title and will be generated by inflection.
    :param array $options: Options for sorting link.

Generates a sorting link. Sets querystring parameters for the sort and
direction. Links will default to sorting by asc. After the first click, links
generated with ``sort()`` will handle direction switching automatically.  If the
resultset is sorted 'asc' by the specified key the returned link will sort by
'desc'.

Accepted keys for ``$options``:

* ``escape`` Whether you want the contents HTML entity encoded, defaults to
  true.
* ``model`` The model to use, defaults to :php:meth:`PaginatorHelper::defaultModel()`.

Assuming you are paginating some posts, and are on page one::

    echo $this->Paginator->sort('user_id');

Output:

.. code-block:: html

    <a href="/posts/index?page=1&amp;sort=user_id&amp;direction=asc">User Id</a>

You can use the title parameter to create custom text for your link::

    echo $this->Paginator->sort('user_id', 'User account');

Output:

.. code-block:: html

    <a href="/posts/index?page=1&amp;sort=user_id&amp;direction=asc">User account</a>

If you are using HTML like images in your links remember to set escaping off::

    echo $this->Paginator->sort('user_id', '<em>User account</em>', array('escape' => false));

Output:

.. code-block:: html

    <a href="/posts/index?page=1&amp;sort=user_id&amp;direction=asc"><em>User account</em></a>

The direction option can be used to set the default direction for a link. Once a
link is active, it will automatically switch directions like normal::

    echo $this->Paginator->sort('user_id', null, array('direction' => 'desc'));

Output:

.. code-block:: html

    <a href="/posts/index?page=1&amp;sort=user_id&amp;direction=desc">User Id</a>

.. php:method:: sortDir(string $model = null, mixed $options = [])

    Gets the current direction the recordset is sorted.

.. php:method:: sortKey(string $model = null, mixed $options = [])

    Gets the current key by which the recordset is sorted.

Creating page number links
==========================

.. php:method:: numbers($options = [])

Returns a set of numbers for the paged result set. Uses a modulus to
decide how many numbers to show on each side of the current page  By default
8 links on either side of the current page will be created if those pages exist.
Links will not be generated for pages that do not exist. The current page is
also not a link.

Supported options are:

* ``before`` Content to be inserted before the numbers.
* ``after`` Content to be inserted after the numbers.
* ``model`` Model to create numbers for, defaults to
  :php:meth:`PaginatorHelper::defaultModel()`.
* ``modulus`` how many numbers to include on either side of the current page,
  defaults to 8.
* ``first`` Whether you want first links generated, set to an integer to
  define the number of 'first' links to generate. Defaults to false. If a
  string is set a link to the first page will be generated with the value as the
  title::

      echo $this->Paginator->numbers(['first' => 'First page']);

* ``last`` Whether you want last links generated, set to an integer to define
  the number of 'last' links to generate. Defaults to false. Follows the same
  logic as the ``first`` option. There is a
  :php:meth:`~PaginatorHelper::last()`` method to be used separately as well if
  you wish.

While this method allows a lot of customization for its output. It is
also ok to just call the method without any params.::

    echo $this->Paginator->numbers();

Using the first and last options you can create links to the beginning
and end of the page set. The following would create a set of page links that
include links to the first 2 and last 2 pages in the paged results::

    echo $this->Paginator->numbers(['first' => 2, 'last' => 2]);

Creating jump links
===================

In addition to generating links that go directly to specific page numbers,
you'll often want links that go to the previous and next links, first and last
pages in the paged data set.

.. php:method:: prev($title = '<< Previous', $options = [])

    :param string $title: Title for the link.
    :param mixed $options: Options for pagination link.

    Generates a link to the previous page in a set of paged records.

    ``$options`` supports the following keys:

    * ``escape`` Whether you want the contents HTML entity encoded,
      defaults to true.
    * ``model`` The model to use, defaults to :php:meth:`PaginatorHelper::defaultModel()`.
    * ``disabledTitle`` The text to use when the link is disabled. Defaults to
      the ``$title`` parameter.

    A simple example would be::

        echo $this->Paginator->prev(' << ' . __('previous'));

    If you were currently on the second page of posts, you would get the following:

    .. code-block:: html

        <li class="prev"><a rel="prev" href="/posts/index?page=1&amp;sort=title&amp;order=desc">&lt;&lt; previous</a></span>

    If there were no previous pages you would get:

    .. code-block:: html

        <li class="prev disabled"><span>&lt;&lt; previous</span></li>

    To change the templates used by this method see :ref:`paginator-templates`.

.. php:method:: next($title = 'Next >>', $options = [])

    This method is identical to :php:meth:`~PagintorHelper::prev()` with a few exceptions. It
    creates links pointing to the next page instead of the previous one. It also
    uses ``next`` as the rel attribute value instead of ``prev``

.. php:method:: first($first = '<< first', $options = [])

    Returns a first or set of numbers for the first pages. If a string is given,
    then only a link to the first page with the provided text will be created::

        echo $this->Paginator->first('< first');

    The above creates a single link for the first page. Will output nothing if you
    are on the first page. You can also use an integer to indicate how many first
    paging links you want generated::

        echo $this->Paginator->first(3);

    The above will create links for the first 3 pages, once you get to the third or
    greater page. Prior to that nothing will be output.

    The options parameter accepts the following:

    - ``model`` The model to use defaults to :php:meth:`PaginatorHelper::defaultModel()`
    - ``escape`` Whether or not the text should be escaped. Set to false if your
      content contains HTML.

.. php:method:: last($last = 'last >>', $options = [])

    This method works very much like the :php:meth:`~PaginatorHelper::first()`
    method. It has a few differences though. It will not generate any links if you
    are on the last page for a string values of ``$last``. For an integer value of
    ``$last`` no links will be generated once the user is inside the range of last
    pages.

Checking the Pagination State
=============================

.. php:method:: current(string $model = null)

    Gets the current page of the recordset for the given model::

        // Our URL is: http://example.com/comments/view/page:3
        echo $this->Paginator->current('Comment');
        // Output is 3

.. php:method:: hasNext(string $model = null)

    Returns true if the given result set is not at the last page.

.. php:method:: hasPrev(string $model = null)

    Returns true if the given result set is not at the first page.

.. php:method:: hasPage(string $model = null, integer $page = 1)

    Returns true if the given result set has the page number given by ``$page``.

Creating a Page Counter
=======================

.. php:method:: counter($options = [])

Returns a counter string for the paged result set. Using a provided format
string and a number of options you can create localized and application
specific indicators of where a user is in the paged data set.

There are a number of options for ``counter()``. The supported ones are:

* ``format`` Format of the counter. Supported formats are 'range', 'pages'
  and custom. Defaults to pages which would output like '1 of 10'. In the
  custom mode the supplied string is parsed and tokens are replaced with
  actual values. The available tokens are:

  -  ``{{page}}`` - the current page displayed.
  -  ``{{pages}}`` - total number of pages.
  -  ``{{current}}`` - current number of records being shown.
  -  ``{{count}}`` - the total number of records in the result set.
  -  ``{{start}}`` - number of the first record being displayed.
  -  ``{{end}`` - number of the last record being displayed.
  -  ``{{model}}`` - The pluralized human form of the model name.
     If your model was 'RecipePage', ``{{model}}`` would be 'recipe pages'.

  You could also supply only a string to the counter method using the tokens
  available. For example::

      echo $this->Paginator->counter(
          'Page {{page}} of {{pages}}, showing {{current}} records out of
           {{count}} total, starting on record {{start}}, ending on {{end}}'
      );

  Setting 'format' to range would output like '1 - 3 of 13'::

      echo $this->Paginator->counter(array(
          'format' => 'range'
      ));

* ``model`` The name of the model being paginated, defaults to
  :php:meth:`PaginatorHelper::defaultModel()`. This is used in
  conjunction with the custom string on 'format' option.

Modifying the Options PaginatorHelper Uses
==========================================

.. php:method:: options($options = [])

    :param mixed $options: Default options for pagination links. If a
       string is supplied - it is used as the DOM id element to update.

Sets all the options for the Paginator Helper. Supported options are:

* ``url`` The URL of the paginating action. 'url' has a few sub options as well:

  -  ``sort`` The key that the records are sorted by.
  -  ``direction`` The direction of the sorting. Defaults to 'ASC'.
  -  ``page`` The page number to display.

  The above mentioned options can be used to force particular pages/directions.
  You can also append additional URL content into all URLs generated in the
  helper::

      $this->Paginator->options([
          'url' => [
              'sort' => 'email',
              'direction' => 'desc',
              'page' => 6,
              'lang' => 'en'
          ]
      ]);

  The above adds the ``en`` route parameter to all links the helper will
  generate. It will also create links with specific sort, direction and page
  values.  By default PaginatorHelper will merge in all of the current passed
  arguments and query string parameters.

* ``escape`` Defines if the title field for links should be HTML escaped.
  Defaults to true.

* ``model`` The name of the model being paginated, defaults to
  :php:meth:`PaginatorHelper::defaultModel()`.

Pagination in Views
===================

It's up to you to decide how to show records to the user, but most
often this will be done inside HTML tables. The examples below
assume a tabular layout, but the PaginatorHelper available in views
doesn't always need to be restricted as such.

See the details on
`PaginatorHelper <http://api.cakephp.org/3.0/class/paginator-helper>`_
in the API. As mentioned, the PaginatorHelper also offers sorting features
which can be easily integrated into your table column headers:

.. code-block:: php

    // App/View/Posts/index.ctp
    <table>
        <tr>
            <th><?= $this->Paginator->sort('id', 'ID') ?></th>
            <th><?= $this->Paginator->sort('title', 'Title') ?></th>
        </tr>
           <?php foreach ($data as $recipe): ?>
        <tr>
            <td><?= $recipe['Recipe']['id'] ?> </td>
            <td><?= h($recipe['Recipe']['title']) ?> </td>
        </tr>
        <?php endforeach; ?>
    </table>

The links output from the ``sort()`` method of the ``PaginatorHelper``
allow users to click on table headers to toggle the sorting of the
data by a given field.

It is also possible to sort a column based on associations:

.. code-block:: php

    <table>
        <tr>
            <th><?= $this->Paginator->sort('title', 'Title') ?></th>
            <th><?= $this->Paginator->sort('Author.name', 'Author') ?></th>
        </tr>
           <?php foreach ($data as $recipe): ?>
        <tr>
            <td><?= h($recipe['Recipe']['title']) ?> </td>
            <td><?= h($recipe['Author']['name']) ?> </td>
        </tr>
        <?php endforeach; ?>
    </table>

The final ingredient to pagination display in views is the addition
of page navigation, also supplied by the PaginationHelper::

    // Shows the page numbers
    <?= $this->Paginator->numbers() ?>

    // Shows the next and previous links
    <?= $this->Paginator->prev('« Previous') ?>
    <?= $this->Paginator->next('Next »') ?>

    // prints X of Y, where X is current page and Y is number of pages
    <?= $this->Paginator->counter() ?>

The wording output by the counter() method can also be customized
using special markers::

    <?= $this->Paginator->counter(array(
        'format' => 'Page {{page}} of {{pages}}, showing {{current}} records out of
                 {{count}} total, starting on record {{start}}, ending on {{end}}'
    )) ?>

Other Methods
=============

.. php:method:: url($options = [], $model = null)

    :param array $options: Pagination/URL options array. As used on
        ``options()`` or ``link()`` method.
    :param string $model: Which model to paginate on

    By default returns a full pagination URL string for use in non-standard
    contexts (i.e. JavaScript).::

        echo $this->Paginator->url(array('sort' => 'title'));

.. php:method:: defaultModel()

    Gets the default model of the paged sets or null if pagination is not
    initialized.

.. php:method:: params(string $model = null)

    Gets the current paging parameters from the resultset for the given model::

        debug($this->Paginator->params());
        /*
        Array
        (
            [page] => 2
            [current] => 2
            [count] => 43
            [prevPage] => 1
            [nextPage] => 3
            [pageCount] => 3
            [order] =>
            [limit] => 20
            [sort] => null
            [direction] = asc
        )
        */

.. php:method:: param(string $key, string $model = null)

    Gets the specific paging parameter from the resultset for the given model::

        debug($this->Paginator->param('count'));
        /*
        (int)43
        */

.. meta::
    :title lang=en: PaginatorHelper
    :description lang=en: The Pagination helper is used to output pagination controls such as page numbers and next/previous links.
    :keywords lang=en: paginator helper,pagination,sort,page number links,pagination in views,prev link,next link,last link,first link,page counter
