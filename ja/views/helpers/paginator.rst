Paginator
#########

.. php:namespace:: Cake\View\Helper

.. php:class:: PaginatorHelper(View $view, array $config = [])

The PaginatorHelper is used to output pagination controls such as page numbers
and next/previous links. It works in tandem with
:php:class:`PaginatorComponent`.

See also :doc:`/controllers/components/pagination` for information on how to
create paginated datasets and do paginated queries.

.. _paginator-templates:

PaginatorHelper Templates
=========================

Internally PaginatorHelper uses a series of simple HTML templates to generate
markup. You can modify these templates to customize the HTML generated by the
PaginatorHelper.

Templates use ``{{var}}`` style placeholders. It is important to not add any
spaces around the `{{}}` or the replacements will not work.

Loading Templates from a File
-----------------------------

When adding the PaginatorHelper in your controller, you can define the
'templates' setting to define a template file to load. This allows you to
customize multiple templates and keep your code DRY::

    // In your AppView.php
    public function initialize()
    {
        ...
        $this->loadHelper('Paginator', ['templates' => 'paginator-templates']);
    }

This will load the file located at **config/paginator-templates.php**. See the
example below for how the file should look like. You can also load templates
from a plugin using :term:`plugin syntax`::

    // In your AppView.php
    public function initialize()
    {
        ...
        $this->loadHelper('Paginator', ['templates' => 'MyPlugin.paginator-templates']);
    }

Whether your templates are in the primary application or a plugin, your
templates file should look something like::

    return [
        'number' => '<a href="{{url}}">{{text}}</a>',
    ];

Changing Templates at Run-time
------------------------------

.. php:method:: templates($templates = null)

This method allows you to change the templates used by PaginatorHelper at
runtime. This can be useful when you want to customize templates for a
particular method call::

    // Read the current template value.
    $result = $this->Paginator->templates('number');

    // Change a template
    $this->Paginator->templates([
        'number' => '<em><a href="{{url}}">{{text}}</a></em>'
    ]);

.. warning::

    Template strings containing a percentage sign (``%``) need special
    attention, you should prefix this character with another percentage so it
    looks like ``%%``. The reason is that internally templates are compiled to
    be used with ``sprintf()``.
    Example: '<div style="width:{{size}}%%">{{content}}</div>'

Template Names
--------------

PaginatorHelper uses the following templates:

- ``nextActive`` The active state for a link generated by next().
- ``nextDisabled`` The disabled state for next().
- ``prevActive`` The active state for a link generated by prev().
- ``prevDisabled`` The disabled state for prev()
- ``counterRange`` The template counter() uses when format == range.
- ``counterPages`` The template counter() uses when format == pages.
- ``first`` The template used for a link generated by first().
- ``last`` The template used for a link generated by last()
- ``number`` The template used for a link generated by numbers().
- ``current`` The template used for the current page.
- ``ellipsis`` The template used for ellipses generated by numbers().
- ``sort`` The template for a sort link with no direction.
- ``sortAsc`` The template for a sort link with an ascending direction.
- ``sortDesc`` The template for a sort link with a descending direction.


Creating Sort Links
===================

.. php:method:: sort($key, $title = null, $options = [])

    :param string $key: The name of the column that the recordset should be sorted.
    :param string $title: Title for the link. If $title is null $key will be
        used for the title and will be generated by inflection.
    :param array $options: Options for sorting link.

Generates a sorting link. Sets querystring parameters for the sort and
direction. Links will default to sorting by asc. After the first click, links
generated with ``sort()`` will handle direction switching automatically.  If the
resultset is sorted 'asc' by the specified key the returned link will sort by
'desc'.

Accepted keys for ``$options``:

* ``escape`` Whether you want the contents HTML entity encoded, defaults to
  ``true``.
* ``model`` The model to use, defaults to :php:meth:`PaginatorHelper::defaultModel()`.
* ``direction`` The default direction to use when this link isn't active.
* ``lock`` Lock direction. Will only use the default direction then, defaults to ``false``.

Assuming you are paginating some posts, and are on page one::

    echo $this->Paginator->sort('user_id');

Output:

.. code-block:: html

    <a href="/posts/index?page=1&amp;sort=user_id&amp;direction=asc">User Id</a>

You can use the title parameter to create custom text for your link::

    echo $this->Paginator->sort('user_id', 'User account');

Output:

.. code-block:: html

    <a href="/posts/index?page=1&amp;sort=user_id&amp;direction=asc">User account</a>

If you are using HTML like images in your links remember to set escaping off::

    echo $this->Paginator->sort(
      'user_id',
      '<em>User account</em>',
      ['escape' => false]
    );

Output:

.. code-block:: html

    <a href="/posts/index?page=1&amp;sort=user_id&amp;direction=asc"><em>User account</em></a>

The direction option can be used to set the default direction for a link. Once a
link is active, it will automatically switch directions like normal::

    echo $this->Paginator->sort('user_id', null, ['direction' => 'desc']);

Output:

.. code-block:: html

    <a href="/posts/index?page=1&amp;sort=user_id&amp;direction=desc">User Id</a>

The lock option can be used to lock sorting into the specified direction::

    echo $this->Paginator->sort('user_id', null, ['direction' => 'asc', 'lock' => true]);

.. php:method:: sortDir(string $model = null, mixed $options = [])

    Gets the current direction the recordset is sorted.

.. php:method:: sortKey(string $model = null, mixed $options = [])

    Gets the current key by which the recordset is sorted.

Creating page number links
==========================

.. php:method:: numbers($options = [])

Returns a set of numbers for the paged result set. Uses a modulus to
decide how many numbers to show on each side of the current page  By default
8 links on either side of the current page will be created if those pages exist.
Links will not be generated for pages that do not exist. The current page is
also not a link.

Supported options are:

* ``before`` Content to be inserted before the numbers.
* ``after`` Content to be inserted after the numbers.
* ``model`` Model to create numbers for, defaults to
  :php:meth:`PaginatorHelper::defaultModel()`.
* ``modulus`` how many numbers to include on either side of the current page,
  defaults to 8.
* ``first`` Whether you want first links generated, set to an integer to
  define the number of 'first' links to generate. Defaults to ``false``. If a
  string is set a link to the first page will be generated with the value as the
  title::

      echo $this->Paginator->numbers(['first' => 'First page']);

* ``last`` Whether you want last links generated, set to an integer to define
  the number of 'last' links to generate. Defaults to ``false``. Follows the same
  logic as the ``first`` option. There is a
  :php:meth:`~PaginatorHelper::last()`` method to be used separately as well if
  you wish.

While this method allows a lot of customization for its output. It is
also ok to just call the method without any params. ::

    echo $this->Paginator->numbers();

Using the first and last options you can create links to the beginning
and end of the page set. The following would create a set of page links that
include links to the first 2 and last 2 pages in the paged results::

    echo $this->Paginator->numbers(['first' => 2, 'last' => 2]);

Creating jump links
===================

In addition to generating links that go directly to specific page numbers,
you'll often want links that go to the previous and next links, first and last
pages in the paged data set.

.. php:method:: prev($title = '<< Previous', $options = [])

    :param string $title: Title for the link.
    :param mixed $options: Options for pagination link.

    Generates a link to the previous page in a set of paged records.

    ``$options`` supports the following keys:

    * ``escape`` Whether you want the contents HTML entity encoded,
      defaults to ``true``.
    * ``model`` The model to use, defaults to :php:meth:`PaginatorHelper::defaultModel()`.
    * ``disabledTitle`` The text to use when the link is disabled. Defaults to
      the ``$title`` parameter.

    A simple example would be::

        echo $this->Paginator->prev(' << ' . __('previous'));

    If you were currently on the second page of posts, you would get the following:

    .. code-block:: html

        <li class="prev">
            <a rel="prev" href="/posts/index?page=1&amp;sort=title&amp;order=desc">
                &lt;&lt; previous
            </a>
        </li>

    If there were no previous pages you would get:

    .. code-block:: html

        <li class="prev disabled"><span>&lt;&lt; previous</span></li>

    To change the templates used by this method see :ref:`paginator-templates`.

.. php:method:: next($title = 'Next >>', $options = [])

    This method is identical to :php:meth:`~PagintorHelper::prev()` with a few exceptions. It
    creates links pointing to the next page instead of the previous one. It also
    uses ``next`` as the rel attribute value instead of ``prev``

.. php:method:: first($first = '<< first', $options = [])

    Returns a first or set of numbers for the first pages. If a string is given,
    then only a link to the first page with the provided text will be created::

        echo $this->Paginator->first('< first');

    The above creates a single link for the first page. Will output nothing if you
    are on the first page. You can also use an integer to indicate how many first
    paging links you want generated::

        echo $this->Paginator->first(3);

    The above will create links for the first 3 pages, once you get to the third or
    greater page. Prior to that nothing will be output.

    The options parameter accepts the following:

    - ``model`` The model to use defaults to :php:meth:`PaginatorHelper::defaultModel()`
    - ``escape`` Whether or not the text should be escaped. Set to ``false`` if your
      content contains HTML.

.. php:method:: last($last = 'last >>', $options = [])

    This method works very much like the :php:meth:`~PaginatorHelper::first()`
    method. It has a few differences though. It will not generate any links if you
    are on the last page for a string values of ``$last``. For an integer value of
    ``$last`` no links will be generated once the user is inside the range of last
    pages.

Checking the Pagination State
=============================

.. php:method:: current(string $model = null)

    Gets the current page of the recordset for the given model::

        // Our URL is: http://example.com/comments/view/page:3
        echo $this->Paginator->current('Comment');
        // Output is 3

.. php:method:: hasNext(string $model = null)

    Returns ``true`` if the given result set is not at the last page.

.. php:method:: hasPrev(string $model = null)

    Returns ``true`` if the given result set is not at the first page.

.. php:method:: hasPage(string $model = null, integer $page = 1)

    Returns ``true`` if the given result set has the page number given by ``$page``.

Creating a Page Counter
=======================

.. php:method:: counter($options = [])

Returns a counter string for the paged result set. Using a provided format
string and a number of options you can create localized and application
specific indicators of where a user is in the paged data set.

There are a number of options for ``counter()``. The supported ones are:

* ``format`` Format of the counter. Supported formats are 'range', 'pages'
  and custom. Defaults to pages which would output like '1 of 10'. In the
  custom mode the supplied string is parsed and tokens are replaced with
  actual values. The available tokens are:

  -  ``{{page}}`` - the current page displayed.
  -  ``{{pages}}`` - total number of pages.
  -  ``{{current}}`` - current number of records being shown.
  -  ``{{count}}`` - the total number of records in the result set.
  -  ``{{start}}`` - number of the first record being displayed.
  -  ``{{end}}`` - number of the last record being displayed.
  -  ``{{model}}`` - The pluralized human form of the model name.
     If your model was 'RecipePage', ``{{model}}`` would be 'recipe pages'.

  You could also supply only a string to the counter method using the tokens
  available. For example::

      echo $this->Paginator->counter(
          'Page {{page}} of {{pages}}, showing {{current}} records out of
           {{count}} total, starting on record {{start}}, ending on {{end}}'
      );

  Setting 'format' to range would output like '1 - 3 of 13'::

      echo $this->Paginator->counter([
          'format' => 'range'
      ]);

* ``model`` The name of the model being paginated, defaults to
  :php:meth:`PaginatorHelper::defaultModel()`. This is used in
  conjunction with the custom string on 'format' option.

Configuring Pagination Options
==============================

.. php:method:: options($options = [])

Sets all the options for the PaginatorHelper. Supported options are:

* ``url`` The URL of the paginating action. 'url' has a few sub options as well:

  -  ``sort`` The key that the records are sorted by.
  -  ``direction`` The direction of the sorting. Defaults to 'ASC'.
  -  ``page`` The page number to display.

  The above mentioned options can be used to force particular pages/directions.
  You can also append additional URL content into all URLs generated in the
  helper::

      $this->Paginator->options([
          'url' => [
              'sort' => 'email',
              'direction' => 'desc',
              'page' => 6,
              'lang' => 'en'
          ]
      ]);

  The above adds the ``en`` route parameter to all links the helper will
  generate. It will also create links with specific sort, direction and page
  values. By default PaginatorHelper will merge in all of the current passed
  arguments and query string parameters.

* ``escape`` Defines if the title field for links should be HTML escaped.
  Defaults to ``true``.

* ``model`` The name of the model being paginated, defaults to
  :php:meth:`PaginatorHelper::defaultModel()`.

使用例
======

ユーザーに対してどのようにレコードを表示するのかは自由に決められますが、一般的には、HTMLテーブルにより行われます。
以下の例ではテーブルレイアウトを前提としていますが、ビューの中で利用可能なPaginatorHelperが、
そのように機能を制限されているわけではありません。

詳細はAPIの中の `PaginatorHelper <https://api.cakephp.org/3.0/class-Cake.View.Helper.PaginatorHelper.html>`_
を参照してください。なお、前述のように、PaginatorHelperには、テーブルの列ヘッダーに統合できるソート機能もあります。:

.. code-block:: php

    <!-- src/Template/Posts/index.ctp -->
    <table>
        <tr>
            <th><?= $this->Paginator->sort('id', 'ID') ?></th>
            <th><?= $this->Paginator->sort('title', 'Title') ?></th>
        </tr>
           <?php foreach ($recipes as $recipe): ?>
        <tr>
            <td><?= $recipe->id ?> </td>
            <td><?= h($recipe->title) ?> </td>
        </tr>
        <?php endforeach; ?>
    </table>

``PaginatorHelper`` の ``sort()`` メソッドから出力されたリンクにより、
ユーザーはテーブルのヘッダーをクリックして、指定されたフィールドによるデータのソートを切り替えることができます。

アソシエーションに基づいて列をソートすることもできます。:

.. code-block:: php

    <table>
        <tr>
            <th><?= $this->Paginator->sort('title', 'Title') ?></th>
            <th><?= $this->Paginator->sort('Authors.name', 'Author') ?></th>
        </tr>
           <?php foreach ($recipes as $recipe): ?>
        <tr>
            <td><?= h($recipe->title) ?> </td>
            <td><?= h($recipe->name) ?> </td>
        </tr>
        <?php endforeach; ?>
    </table>

ビューにおけるページ制御の表示に関する最後のネタは、
PaginationHelperによって提供されるページナビゲーションの追加です。::

    // ページ番号を表示する
    <?= $this->Paginator->numbers() ?>

    // 次ページと前ページのリンクを表示する
    <?= $this->Paginator->prev('« Previous') ?>
    <?= $this->Paginator->next('Next »') ?>

    // 現在のページ番号 / 全ページ数 を表示する
    <?= $this->Paginator->counter() ?>

counter() メソッドによる文章出力は、特殊なマーカーを使用してカスタマイズできます。::

    <?= $this->Paginator->counter([
        'format' => 'ページ {{page}} / {{pages}}, 全 {{count}} レコード中の
                 {{current}} レコードを表示中, 先頭レコード {{start}}, 末尾 {{end}}'
    ]) ?>

ページ制御URLの生成
===================

.. php:method:: generateUrl(array $options = [], $model = null, $full = false)

By default returns a full pagination URL string for use in non-standard contexts
(i.e. JavaScript). ::
デフォルトでは、非標準的なコンテキスト（JavaScriptなど）で使用する完全なページ制御URL文字列を返します。

    echo $this->Paginator->generateUrl(['sort' => 'title']);

.. _paginator-helper-multiple:

複数の結果の改ページ
====================

:ref:`複数のクエリをページ制御する <paginating-multiple-queries>` 場合は、
ページ設定関連要素を生成するときに ``model`` オプションを設定する必要があります。
``PaginatorHelper`` のすべてのメソッド呼び出しで ``model`` オプションを使用するか、
``options()`` を使用してデフォルトモデルを設定することができます。::

    // モデルオプションを渡す
    echo $this->Paginator->sort('title', ['model' => 'Articles']);

    // デフォルトモデルを設定する
    $this->Paginator->options(['defaultModel' => 'Articles']);
    echo $this->Paginator->sort('title');

``model`` オプションを使用すると、 ``PaginatorHelper`` はクエリがページ制御されたときに定義された ``scope`` を自動的に使用します。

.. versionadded:: 3.3.0
    3.3.0で複数のページ制御が追加されました

.. meta::
    :title lang=ja: PaginatorHelper
    :description lang=ja: PaginatorHelperは、ページ番号や次/前のリンクなどの改ページコントロールを出力するために使用されます。
    :keywords lang=ja: paginator helper,pagination,sort,page number links,pagination in views,prev link,next link,last link,first link,page counter
